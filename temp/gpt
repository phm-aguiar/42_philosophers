# include <pthread.h>  // Para funções relacionadas a threads
# include <stdio.h>    // Para printf
# include <stdlib.h>   // Para malloc e free
# include <string.h>   // Para memset
# include <sys/time.h> // Para gettimeofday
# include <unistd.h>   // Para write e usleep
# define RED "\033[0;31m"
# define GREEN "\033[0;32m"
# define YELLOW "\033[0;33m"
# define BLUE "\033[0;34m"
# define MAGENTA "\033[0;35m"
# define CYAN "\033[0;36m"
# define BLACK "\033[0;30m"
# define RESET "\033[0m"

typedef struct s_philo	t_philo;

typedef enum e_bool
{
	FALSE,
	TRUE
}						t_bool;

typedef enum e_time
{
	SECOND,
	MILLISEC,
	MICROSEC
}						t_time;

typedef struct s_philo
{
	int					id;
	pthread_t			thread;
	pthread_mutex_t		fork;
	long				last_meal;
	long				time_to_sleep;
	int					num_eat;
	int					num_forks;
	t_philo				*next;
	t_philo				*prev;
}						t_philo;

typedef struct s_data
{
	int					num_philos;
	int					time_to_die;
	int					time_to_eat;
	int					time_to_sleep;
	int					num_must_eat;
	long				start_time;
	pthread_mutex_t		taken;
	pthread_mutex_t		print_status;
	pthread_mutex_t		check_dead_mutex;
	pthread_mutex_t		dead_mutex;
	pthread_mutex_t		check_eat_mutex;
	t_bool				dead;
	t_bool				printed;
	t_philo				*head;
}						t_data;

t_data					*get_core(void);
void					init_philos(void);
t_philo					*new_philo(int id);
void					add_philo_back(t_philo **philo, t_philo *new);

// dinner.c

void					take_fork(t_philo *philo);
void					eating(t_philo *philo);
void					sleeping(t_philo *philo);
void					thinking(t_philo *philo);
void					*dinner(void *arg);
t_bool					imdead(t_philo *philo);
void					unlock_forks(t_philo *philo);
void					*monitor(void *arg);

// print_status.c

void					print_status(t_philo *philo, char *status);

// time.c

long					get_time(t_time unit_of_measurement);

// error.c

void					error(char *msg);

void					init_all_mutex(void);
void					*dinner_solo(void *arg);

void	*dinner(void *arg)
{
	t_philo	*philo;

	philo = (t_philo *)arg;
	philo->last_meal = get_core()->start_time;
	if (philo->id % 2 == 0)
		usleep(10);
	take_fork(philo);
	return (NULL);
}

void	*dinner_solo(void *arg)
{
	t_philo	*philo;

	philo = (t_philo *)arg;
	pthread_mutex_lock(&philo->fork);
	print_status(philo, "has taken a fork");
	usleep(get_core()->time_to_die * 1000);
	return (NULL);
}


void	error(char *msg)
{
	printf("%sError: %s\n%s", RED, msg, RESET);
	exit(1);
}


void	add_philo_back(t_philo **philo, t_philo *new)
{
	if (!*philo)
	{
		*philo = new;
		(*philo)->next = new;
		(*philo)->prev = new;
		return ;
	}
	new->next = *philo;
	new->prev = (*philo)->prev;
	(*philo)->prev->next = new;
	(*philo)->prev = new;
}

t_philo	*new_philo(int id)
{
	t_philo	*philo;

	philo = malloc(sizeof(t_philo));
	philo->id = id;
	philo->num_eat = 0;
	philo->num_forks = 0;
	philo->last_meal = get_time(MILLISEC);
	philo->next = NULL;
	philo->prev = NULL;
	return (philo);
}

void	init_all_mutex(void)
{
	t_philo	*philo;
	int		i;

	i = 0;
	philo = get_core()->head;
	while (i < get_core()->num_philos)
	{
		pthread_mutex_init(&philo->fork, NULL);
		philo = philo->next;
		i++;
	}
	pthread_mutex_init(&get_core()->print_status, NULL);
	pthread_mutex_init(&get_core()->dead_mutex, NULL);
	pthread_mutex_init(&get_core()->check_dead_mutex, NULL);
	pthread_mutex_init(&get_core()->check_eat_mutex, NULL);
}

t_data	*get_core(void)
{
	static t_data	core;

	return (&core);
}

void	init_philos(void)
{
	int		i;
	t_philo	*philo;

	i = 1;
	philo = NULL;
	while (i <= get_core()->num_philos)
	{
		add_philo_back(&philo, new_philo(i));
		i++;
	}
	get_core()->head = philo;
}


void	destroy_mutexes(void)
{
	int		i;
	t_philo	*philo;

	i = 0;
	philo = get_core()->head;
	while (i < get_core()->num_philos)
	{
		pthread_mutex_destroy(&philo->fork);
		philo = philo->next;
		i++;
	}
	pthread_mutex_destroy(&get_core()->print_status);
	pthread_mutex_destroy(&get_core()->dead_mutex);
	pthread_mutex_destroy(&get_core()->check_dead_mutex);
	pthread_mutex_destroy(&get_core()->check_eat_mutex);
}

void	print_status(t_philo *philo, char *status)
{
	long	time;

	time = get_time(MILLISEC) - get_core()->start_time;
	pthread_mutex_lock(&get_core()->print_status);
	printf("%li %d %s\n", time, philo->id, status);
	pthread_mutex_unlock(&get_core()->print_status);
}

void	wait_for_threads(t_philo *philo, pthread_t waiter)
{
	int	i;

	i = 0;
	while (i < get_core()->num_philos)
	{
		pthread_join(philo->thread, NULL);
		philo = philo->next;
		i++;
	}
	pthread_join(waiter, NULL);
}

void	create_threads(t_philo *philo)
{
	int			i;
	pthread_t	waiter;

	i = 0;
	get_core()->start_time = get_time(MILLISEC);
	if (get_core()->num_philos == 1)
	{
		pthread_create(&philo->thread, NULL, dinner_solo, (void *)philo);
		pthread_join(philo->thread, NULL);
		return ;
	}
	while (i < get_core()->num_philos)
	{
		pthread_create(&philo->thread, NULL, dinner, (void *)philo);
		philo = philo->next;
		i++;
	}
	pthread_create(&waiter, NULL, monitor, (void *)philo);
	wait_for_threads(philo, waiter);
}
// wait_for_threads(philo);

int	main(int argc, char **argv)
{
	t_philo	*philo;

	if (argc != 5 && argc != 6)
	{
		printf("Error: wrong number of arguments\n");
		return (1);
	}
	get_core()->num_philos = atoi(argv[1]);
	get_core()->time_to_die = atoi(argv[2]);
	get_core()->time_to_eat = atoi(argv[3]) * 1000;
	get_core()->time_to_sleep = atoi(argv[4]) * 1000;
	init_philos();
	init_all_mutex();
	philo = get_core()->head;
	create_threads(philo);
	destroy_mutexes();
	return (0);
}


void	unlock_forks(t_philo *philo)
{
	int	i;

	i = 0;
	while (i < get_core()->num_philos)
	{
		pthread_mutex_unlock(&philo->fork);
		philo = philo->next;
		i++;
	}
}

t_bool	imdead(t_philo *philo)
{
	t_bool	dead;

	pthread_mutex_lock(&get_core()->check_dead_mutex);
	dead = get_core()->dead;
	pthread_mutex_unlock(&get_core()->check_dead_mutex);
	if (dead == TRUE)
	{
		unlock_forks(philo);
		return (TRUE);
	}
	return (FALSE);
}

void	*monitor(void *arg)
{
	t_philo	*philo;

	philo = (t_philo *)arg;
	while (get_core()->dead == FALSE)
	{
		if (imdead(philo))
			break ;
		if (get_time(MILLISEC) - philo->last_meal >= get_core()->time_to_die)
		{
			pthread_mutex_lock(&get_core()->dead_mutex);
			get_core()->dead = TRUE;
			pthread_mutex_unlock(&get_core()->dead_mutex);
			print_status(philo, "died");
			break ;
		}
		philo = philo->next;
	}
	return (NULL);
}


void	thinking(t_philo *philo)
{
	if (imdead(philo))
		return ;
	print_status(philo, "is thinking");
	if (philo->num_forks == 0)
		take_fork(philo);
}

void	sleeping(t_philo *philo)
{
	if (imdead(philo))
		return ;
	print_status(philo, "is sleeping");
	if (imdead(philo))
		return ;
	usleep(get_core()->time_to_sleep);
	if (imdead(philo))
		return ;
	thinking(philo);
}

void	eating(t_philo *philo)
{
	if (imdead(philo))
		return ;
	print_status(philo, "is eating");
	if (imdead(philo))
		return ;
	usleep(get_core()->time_to_eat);
	if (imdead(philo))
		return ;
	pthread_mutex_lock(&get_core()->check_eat_mutex);
	philo->last_meal = get_time(MILLISEC);
	pthread_mutex_unlock(&get_core()->check_eat_mutex);
	if (imdead(philo))
		return ;
	pthread_mutex_unlock(&philo->fork);
	if (imdead(philo))
		return ;
	pthread_mutex_unlock(&philo->next->fork);
	if (imdead(philo))
		return ;
	philo->num_forks = 0;
	philo->num_eat++;
	if (imdead(philo))
		return ;
	sleeping(philo);
}

void	take_fork(t_philo *philo)
{
	if (imdead(philo))
		return ;
	pthread_mutex_lock(&philo->next->fork);
	if (imdead(philo))
		return ;
	print_status(philo, "has taken a fork");
	if (imdead(philo))
		return ;
	pthread_mutex_lock(&philo->fork);
	if (imdead(philo))
		return ;
	print_status(philo, "has taken a fork");
	if (imdead(philo))
		return ;
	philo->num_forks = 2;
	if (imdead(philo))
		return ;
	eating(philo);
}


long	get_time(t_time unit_of_measurement)
{
	struct timeval	tv;

	if (gettimeofday(&tv, NULL))
		error ("Gettimeofday failed.");
	if (SECOND == unit_of_measurement)
		return (tv.tv_sec + (tv.tv_usec / 1e6));
	else if (MILLISEC == unit_of_measurement)
		return ((tv.tv_sec * 1e3) + (tv.tv_usec / 1e3));
	else if (MICROSEC == unit_of_measurement)
		return ((tv.tv_sec * 1e6) + tv.tv_usec);
	else
		error("Wrong input to gettime");
	return (-1);
}
